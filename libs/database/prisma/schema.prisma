// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Permission {
  id             String           @id @default(uuid())
  name           String
  slug           String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  RolePermission RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String   @id @default(uuid())
  name         String
  slug         String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  permissionId String
  roleId       String

  permission Permission @relation(fields: [permissionId], references: [id])
  role       Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Role {
  id              String           @id @default(uuid())
  name            String
  slug            String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  permissionId    Int
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model UserRole {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  roleId    String

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
  @@map("user_roles")
}

model User {
  id                String       @id @default(uuid())
  firstName         String?
  lastName          String?
  email             String       @unique
  hashedPassword    String
  salt              String?
  birthDate         DateTime?
  gender            String       @default("M")
  address           String?
  city              String?
  state             String?
  country           String?
  imageUrl          String?
  isActive          Boolean?     @default(false)
  lastLogin         DateTime?
  phone             String?
  NbFailedAttempts  Int          @default(0)
  temporaryLockedAt DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  userRoles         UserRole[]
  marchant          Merchant?
  userSupport       UserSupport?
  AuditLog          AuditLog[]

  @@map("users")
}

model Merchant {
  id            String        @id @default(uuid())
  userId        String
  institutionId String
  accountStatus AccountStatus @relation(fields: [accountStatusId], references: [id])

  institution              Institution                @relation(fields: [institutionId], references: [id])
  user                     User                       @relation(fields: [userId], references: [id])
  MerchantWallet           MerchantWallet[]
  MerchantAccountParameter MerchantAccountParameter[]
  accountStatusId          String

  @@unique([userId])
  @@map("marchants")
}

model UserSupport {
  id     Int    @id @default(autoincrement())
  userId String

  user User @relation(fields: [userId], references: [id])

  @@unique([userId])
  @@map("users_support")
}

model Transaction {
  id                     String            @id @default(uuid())
  idOps                  DailyOperation    @relation(fields: [dailyOperationId], references: [id])
  merchantReference      String
  amount                 Float
  currency               Currency          @relation(fields: [currencyId], references: [id])
  service                Service           @relation(fields: [serviceId], references: [id])
  status                 TransactionStatus @relation(fields: [transactionStatusId], references: [id])
  telcoStatus            String
  telcoStatusDescription String
  reference              String
  telcoReference         String
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  dailyOperationId       String
  currencyId             String
  transactionStatusId    String
  serviceId              String

  @@unique([merchantReference])
  @@unique([telcoReference])
  @@unique([reference])
  @@index([merchantReference])
  @@index([reference])
  @@index([telcoReference])
  @@index([dailyOperationId])
  @@map("transaction")
}

model DailyOperation {
  id                     String            @id @default(uuid())
  merchantReference      String
  amount                 Float
  currency               Currency          @relation(fields: [currencyId], references: [id])
  service                Service           @relation(fields: [serviceId], references: [id])
  status                 TransactionStatus @relation(fields: [transactionStatusId], references: [id])
  telcoStatus            String
  telcoStatusDescription String
  reference              String
  telcoReference         String
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  Transaction            Transaction[]
  currencyId             String
  serviceId              String
  transactionStatusId    String

  @@unique([merchantReference])
  @@unique([telcoReference])
  @@unique([reference])
  @@index([merchantReference])
  @@index([reference])
  @@index([telcoReference])
  @@map("daily_operation")
}

model TransactionStatus {
  id             String           @id @default(uuid())
  status         String
  Transaction    Transaction[]
  DailyOperation DailyOperation[]

  @@map("transaction_status")
}

model Currency {
  id             String           @id @default(uuid())
  currency       String
  Transaction    Transaction[]
  DailyOperation DailyOperation[]
  MerchantWallet MerchantWallet[]

  @@map("currency")
}

model Institution {
  id        String   @id @default(uuid())
  name      String
  email     String
  tel       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Marchant Merchant[]

  @@map("institution")
}

model MerchantCommission {
  id         String   @id @default(uuid())
  service    Service  @relation(fields: [serviceId], references: [id])
  action     String
  commission Float
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
  serviceId  String

  @@index([serviceId])
  @@map("merchant_commission")
}

model Service {
  id                 String               @id @default(uuid())
  name               String
  serviceTopic       String
  MerchantCommission MerchantCommission[]
  MerchantWallet     MerchantWallet[]
  Transaction        Transaction[]
  DailyOperation     DailyOperation[]

  @@map("service")
}

model AccountStatus {
  id       String     @id @default(uuid())
  name     String
  Merchant Merchant[]

  @@map("account_status")
}

model MerchantWallet {
  id                    String                  @id @default(uuid())
  service               Service                 @relation(fields: [serviceId], references: [id])
  merchant              Merchant                @relation(fields: [merchantId], references: [id])
  balance               Float
  currency              Currency                @relation(fields: [currencyId], references: [id])
  serviceId             String
  merchantId            String
  MerchantWalletHistory MerchantWalletHistory[]
  currencyId            String

  @@index([merchantId])
  @@map("merchant_wallet")
}

model MerchantWalletHistory {
  id               String         @id @default(uuid())
  merchantWallet   MerchantWallet @relation(fields: [merchantWalletId], references: [id])
  action           String
  amount           Float
  previousBalance  Float
  actualBalance    Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  merchantWalletId String

  @@index([merchantWalletId])
  @@index([action])
  @@map("merchant_wallet_history")
}

model MerchantAccountParameter {
  id         String   @id @default(uuid())
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  type       String
  key        String
  value      String
  merchantId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("merchant_wallet_parameter")
}

model AgregatorParameter {
  id        String   @id @default(uuid())
  type      String
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("agregator_parameter")
}

model BlacklistNumber {
  id        String   @id @default(uuid())
  number    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blacklist_number")
}

model AuditLog {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  action        String
  modifiedTable String
  oldValue      String
  newValue      String
  createdAt     DateTime @default(now())
  userId        String

  @@map("audit_log")
}
