// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Models
model Permission {
  id             String           @id @default(uuid())
  name           String
  slug           String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  RolePermission RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String   @id @default(uuid())
  name         String
  slug         String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  permissionId String
  roleId       String

  permission Permission @relation(fields: [permissionId], references: [id])
  role       Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Role {
  id              String           @id @default(uuid())
  name            String
  slug            String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model UserRole {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    String
  roleId    String

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
  @@map("user_roles")
}

model User {
  id                String       @id @default(uuid())
  firstName         String?
  lastName          String?
  email             String       @unique
  password          String
  salt              String?
  birthDate         DateTime?
  gender            String       @default("M")
  address           String?
  city              String?
  state             String?
  country           String?
  imageUrl          String?
  isActive          Boolean?     @default(false)
  isMerchant        Boolean?     @default(false)
  lastLogin         DateTime?
  phone             String?
  NbFailedAttempts  Int          @default(0)
  temporaryLockedAt DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  deletedAt         DateTime?
  userRoles         UserRole[]
  merchantId        String?
  userSupportId     String?
  merchant          Merchant?    @relation(fields: [merchantId], references: [id])
  userSupport       UserSupport? @relation(fields: [userSupportId], references: [id])
  AuditLog          AuditLog[]

  @@map("users")
}

model Merchant {
  id            String        @id @default(uuid())
  userId        String
  institutionId String
  deletedAt     DateTime?
  accountStatus AccountStatus @relation(fields: [accountStatusId], references: [id])

  institution              Institution                @relation(fields: [institutionId], references: [id])
  MerchantWallet           MerchantWallet[]
  MerchantAccountParameter MerchantAccountParameter[]
  accountStatusId          String
  DailyOperation           DailyOperation[]
  Transaction              Transaction[]
  users                    User[]

  @@map("marchants")
}

model UserSupport {
  id              String        @id @default(uuid())
  userId          String
  deletedAt       DateTime?
  accountStatusId String
  accountStatus   AccountStatus @relation(fields: [accountStatusId], references: [id])
  users           User[]

  @@map("users_support")
}

model Transaction {
  id                     String            @id @default(uuid())
  dailyOperationId       String            @default(uuid())
  merchantReference      String
  merchant               Merchant?         @relation(fields: [merchantId], references: [id])
  amount                 Float
  currency               Currency          @relation(fields: [currencyId], references: [id])
  service                Service           @relation(fields: [serviceId], references: [id])
  status                 TransactionStatus @relation(fields: [transactionStatusId], references: [id])
  telcoStatus            String
  telcoStatusDescription String
  reference              String
  action                 String?
  telcoReference         String
  customerNumber         String
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  deletedAt              DateTime?
  currencyId             String
  transactionStatusId    String
  serviceId              String
  callbackUrl            String?
  merchantId             String

  @@unique([merchantReference])
  @@unique([reference])
  @@index([merchantReference])
  @@index([reference])
  @@index([telcoReference])
  @@index([dailyOperationId])
  @@map("transaction")
}

model DailyOperation {
  id                     String            @id @default(uuid())
  merchantReference      String
  merchant               Merchant?         @relation(fields: [merchantId], references: [id])
  amount                 Float
  currency               Currency          @relation(fields: [currencyId], references: [id])
  service                Service           @relation(fields: [serviceId], references: [id])
  status                 TransactionStatus @relation(fields: [transactionStatusId], references: [id])
  telcoStatus            String
  telcoStatusDescription String
  reference              String
  action                 String?
  telcoReference         String
  customerNumber         String
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  deletedAt              DateTime?
  currencyId             String
  transactionStatusId    String
  serviceId              String
  callbackUrl            String?
  merchantId             String

  @@unique([merchantReference])
  @@unique([reference])
  @@index([merchantReference])
  @@index([reference])
  @@index([telcoReference])
  @@map("daily_operation")
}

model TransactionStatus {
  id             String           @id @default(uuid())
  status         String
  deletedAt      DateTime?
  Transaction    Transaction[]
  DailyOperation DailyOperation[]

  @@map("transaction_status")
}

model Currency {
  id             String           @id @default(uuid())
  currency       String
  Transaction    Transaction[]
  DailyOperation DailyOperation[]
  MerchantWallet MerchantWallet[]

  @@map("currency")
}

model Institution {
  id          String    @id @default(uuid())
  name        String
  email       String
  phone       String
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  Marchant Merchant[]

  @@map("institution")
}

model MerchantCommission {
  id         String              @id @default(uuid())
  action     ActionOperationEnum
  commission Float
  createdAt  DateTime            @default(now())
  updateAt   DateTime            @updatedAt
  deletedAt  DateTime?
  serviceId  String
  service    Service             @relation(fields: [serviceId], references: [id])

  @@index([serviceId])
  @@map("merchant_commission")
}

model Service {
  id                 String               @id @default(uuid())
  name               String               @unique
  serviceTopic       String
  deletedAt          DateTime?
  MerchantCommission MerchantCommission[]
  MerchantWallet     MerchantWallet[]
  Transaction        Transaction[]
  DailyOperation     DailyOperation[]

  @@map("service")
}

model AccountStatus {
  id          String        @id @default(uuid())
  name        String
  Merchant    Merchant[]
  UserSupport UserSupport[]

  @@map("account_status")
}

model MerchantWallet {
  id         String @id @default(uuid())
  balance    Float
  serviceId  String
  merchantId String

  service               Service                 @relation(fields: [serviceId], references: [id])
  merchant              Merchant                @relation(fields: [merchantId], references: [id])
  currency              Currency                @relation(fields: [currencyId], references: [id])
  MerchantWalletHistory MerchantWalletHistory[]
  currencyId            String

  @@index([merchantId])
  @@map("merchant_wallet")
}

model MerchantWalletHistory {
  id               String              @id @default(uuid())
  action           ActionOperationEnum
  amount           Float
  previousBalance  Float
  actualBalance    Float
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  merchantWalletId String

  merchantWallet MerchantWallet @relation(fields: [merchantWalletId], references: [id])

  @@index([merchantWalletId])
  @@index([action])
  @@map("merchant_wallet_history")
}

model MerchantAccountParameter {
  id         String   @id @default(uuid())
  key        String
  value      String
  merchantId String
  type       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  @@map("merchant_wallet_parameter")
}

model AgregatorParameter {
  id        String   @id @default(uuid())
  type      String
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("agregator_parameter")
}

model BlacklistNumber {
  id        String   @id @default(uuid())
  number    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blacklist_number")
}

model AuditLog {
  id            String              @id @default(uuid())
  action        ActionOperationEnum
  modifiedTable String
  oldValue      String
  newValue      String
  createdAt     DateTime            @default(now())
  deletedAt     DateTime?
  userId        String
  user          User                @relation(fields: [userId], references: [id])

  @@map("audit_log")
}

model NotificationType {
  id           String         @id @default(uuid())
  name         String
  Notification Notification[]

  @@map("notifications_type")
}

model Notification {
  id     String @id @default(uuid())
  name   String
  typeId String

  type NotificationType @relation(fields: [typeId], references: [id])

  @@map("notifications")
}

//Enums
enum ActionOperationEnum {
  DEBIT
  CREDIT
}

enum CurrencyEnum {
  USD
  EUR
  CDF
}

enum TelcoServiceEnum {
  AFRICELL
  AIRTEL
  ORANGE
  VODACOM
}

enum AccountStatusEnum {
  PENDING
  APPROVED
  MEMBER
}

enum UserTypeEnum {
  MERCHANT
  USER_SUPPORT
}

enum UserRoleEnum {
  ROLE_ROOT
  ROLE_ADMIN
  ROLE_WRITER
  ROLE_MANAGER
  ROLE_FREE_USER
}
